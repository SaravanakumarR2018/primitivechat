services:
  chat_service:
    image: chat_service_image:latest
    container_name: chat_service
    networks:
      - primitivechat_network
    volumes:
      - "${PROJECT_ROOT}/src:/app/src"  # Absolute path for source code mounting
      - "${PROJECT_ROOT}/test/IntegrationTests/FileVectorizer/FilesTesting:/app/test/IntegrationTests/FileVectorizer/FilesTesting"
    ports:
      - "${CHAT_SERVICE_PORT}:${CHAT_SERVICE_PORT}"
    depends_on:
      mysql_db:
        condition: service_healthy
      minio:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://${CHAT_SERVICE_HOST}:${CHAT_SERVICE_PORT}/ | grep -q '200'"]
      interval: 10s
      timeout: 5s
      retries: 1000
      start_period: 300s
    env_file:
      - ${PROJECT_ROOT}/src/backend/.env
      - ${PROJECT_ROOT}/src/frontend/.env
      - ${PROJECT_ROOT}/src/frontend/.env.local
    dns:
      - 8.8.8.8
      - 1.1.1.1
    command: supervisord -c /etc/supervisor/supervisord.conf

  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    networks:
      - primitivechat_network
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - mysql_data:/var/lib/mysql  # Use a named volume for MySQL data
    healthcheck:
      test: ["CMD-SHELL", "mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} -h 127.0.0.1 -e 'USE ${MYSQL_DATABASE}; SELECT 1;' || echo 'MySQL Health Check Failed';"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  minio:
    image: minio/minio:RELEASE.2024-11-07T00-52-20Z
    container_name: minio
    networks:
      - primitivechat_network
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - minio-data:/data  # Persistent storage for MinIO
    command: server /data
    ports:
      - "${MINIO_HOST_PORT}:${MINIO_SERVER_PORT}"          # MinIO access port
      - "${MINIO_CONSOLE_PORT}:${MINIO_CONSOLE_PORT}"         # MinIO console port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_SERVER_PORT}/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  weaviate:
    command:
    - --host
    - 0.0.0.0
    - --port
    - '${WEAVIATE_PORT}'
    - --scheme
    - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.27.2
    networks:
      - primitivechat_network
    ports:
    - "${WEAVIATE_HOST_PORT}:${WEAVIATE_PORT}"
    - "${WEAVIATE_GRPC_PORT}:${WEAVIATE_GRPC_PORT}"
    restart: on-failure:0
    volumes:
    - ./weaviate_data:/var/lib/weaviate
    healthcheck:
      test: wget --no-verbose --tries=3 --spider http://localhost:${WEAVIATE_PORT}/v1/.well-known/ready || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      QUERY_DEFAULTS_LIMIT: 50
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      BACKUP_FILESYSTEM_PATH: '/var/lib/weaviate/backups'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'

  ollama:
    build:
      context: ${PROJECT_ROOT}/build/ollama_service_docker
      dockerfile: Dockerfile
      args:
        OLLAMA_MODEL: ${OLLAMA_MODEL} # Pass OLLAMA_MODEL from .env
    image: tinyllama:latest
    container_name: ollama
    networks:
      - primitivechat_network
    ports:
      - "${OLLAMA_PORT}:${OLLAMA_PORT}" # Expose Ollama on port ${OLLAMA_PORT}
    restart: unless-stopped

# Define the named volumes for MySQL and Weaviate
volumes:
  mysql_data:
  minio-data:
  ollama_model_data:
    driver: local

# Define the network
networks:
  primitivechat_network:
    name: primitivechat_network
    driver: bridge

# Define the absolute path for PROJECT_ROOT
x-environment:
  PROJECT_ROOT: ${PROJECT_ROOT}
