services:
  chat_service:
    image: python:3.10-slim
    container_name: chat_service
    working_dir: /app
    environment:
      DB_USER: ${DB_USER:-root}
      DB_PASSWORD: ${DB_PASSWORD:-admin123}
      DB_HOST: ${DB_HOST:-mysql_db}
    volumes:
      - "${PROJECT_ROOT}/src:/app/src"  # Always mount the source code
    command: >
      /bin/sh -c "
      pwd &&
      apt-get update && apt-get install -y curl &&
      pip install -r ./src/backend/lib/requirements.txt &&
      uvicorn src.backend.main.main:main_app --host 0.0.0.0 --port 8000
      "
    ports:
      - "8000:8000"  # Expose FastAPI on port 8000
    depends_on:
      mysql_db:
        condition: service_healthy
      minio:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:8000/ | grep -q '200'"]
      interval: 10s
      timeout: 5s
      retries: 24
      start_period: 300s

  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-admin123}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-mydatabase}
      MYSQL_USER: ${DB_USER:-admin}
      MYSQL_PASSWORD: ${DB_PASSWORD:-admin123}
    command: --default-authentication-plugin=caching_sha2_password
    volumes:
      - mysql_data:/var/lib/mysql  # Use a named volume for MySQL data
    healthcheck:
      test: ["CMD-SHELL", "mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} -h 127.0.0.1 -e 'USE ${MYSQL_DATABASE}; SELECT 1;' || echo 'MySQL Health Check Failed';"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  minio:
    image: minio/minio:RELEASE.2024-11-07T00-52-20Z
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio-data:/data  # Persistent storage for MinIO
    command: server /data
    ports:
      - "9000:9000"         # MinIO access port
      - "9001:9001"         # MinIO console port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  weaviate:
    command:
    - --host
    - 0.0.0.0
    - --port
    - '8080'
    - --scheme
    - http
    image: cr.weaviate.io/semitechnologies/weaviate:1.27.2
    ports:
    - 9002:8080
    - 50051:50051
    restart: on-failure:0
    volumes:
    - ./weaviate_data:/var/lib/weaviate
    healthcheck:
      test: wget --no-verbose --tries=3 --spider http://localhost:8080/v1/.well-known/ready || exit 1
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      QUERY_DEFAULTS_LIMIT: 50
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      BACKUP_FILESYSTEM_PATH: '/var/lib/weaviate/backups'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'

  ollama:
    image: ollama/ollama:0.4.1
    container_name: ollama
    volumes:
      - ollama_model_data:/root/.ollama  # Persist model data to avoid repeated downloads
    ports:
      - "11434:11434"  # Expose Ollama on port 11434
    restart: unless-stopped


# Define the named volumes for MySQL and Weaviate
volumes:
  mysql_data:
  minio-data:
  ollama_model_data:
    driver: local

# Define the absolute path for PROJECT_ROOT
x-environment:
  PROJECT_ROOT: ${PROJECT_ROOT}