name: Deploy and Test

on:
  push:
    branches:
      - "**"  # Trigger on all branches
  pull_request:
    branches:
      - "**"  # Trigger on PR creation
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to deploy"
        required: false
        default: "main"

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 360  # 6-hour max execution time

    env:
      CHAT_SERVICE_PORT: 8000
      FRONTEND_PORT: 3000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  # Use the appropriate Node.js version for Next.js

      - name: Install ngrok
        run: |
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install ngrok
          if [ -z "${{ secrets.NGROK_SECRET_KEY }}" ]; then
            echo "❌ NGROK_SECRET_KEY is missing!"
            exit 1
          else
            echo "✅ NGROK_SECRET_KEY is set."
          fi
          ngrok config add-authtoken ${{ secrets.NGROK_SECRET_KEY }}

      - name: Start Backend Service
        working-directory: src/backend  # Ensure this is correct
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        run: docker-compose up -d

      - name: Start Frontend Service
        run: |
          cd src/frontend  # Change to your Next.js frontend folder
          npm install
          npm run dev &  # Run Next.js frontend in the background

      - name: Wait for Services to be Ready
        run: |
          timeout 120 bash -c '
            until curl -sSf http://localhost:${{ env.CHAT_SERVICE_PORT }} && curl -sSf http://localhost:${{ env.FRONTEND_PORT }}; 
            do 
              sleep 5; 
            done
          ' || { echo "❌ Services did not start in time."; exit 1; }
          echo "✅ Services are up and running."

      - name: Start ngrok tunnels
        run: |
          ngrok http ${{ env.CHAT_SERVICE_PORT }} --log=stdout | grep -o 'https://[a-zA-Z0-9.-]*.ngrok-free.app' > backend_ngrok.txt &
          ngrok http ${{ env.FRONTEND_PORT }} --log=stdout | grep -o 'https://[a-zA-Z0-9.-]*.ngrok-free.app' > frontend_ngrok.txt &
          sleep 10
          echo "Backend ngrok URL: $(cat backend_ngrok.txt)"
          echo "Frontend ngrok URL: $(cat frontend_ngrok.txt)"

      - name: Refresh ngrok links every 1 hour 55 minutes
        run: |
          for i in {1..3}; do  # Refreshes max 3 times to avoid infinite loop
            echo "🔄 Restarting ngrok tunnels..."
            pkill -f ngrok
            ngrok http ${{ env.CHAT_SERVICE_PORT }} --log=stdout | grep -o 'https://[a-zA-Z0-9.-]*.ngrok-free.app' > backend_ngrok.txt &
            ngrok http ${{ env.FRONTEND_PORT }} --log=stdout | grep -o 'https://[a-zA-Z0-9.-]*.ngrok-free.app' > frontend_ngrok.txt &
            sleep 10
            echo "✅ Refreshed ngrok URLs"
            echo "🔗 Backend: $(cat backend_ngrok.txt)"
            echo "🔗 Frontend: $(cat frontend_ngrok.txt)"
            sleep 6900  # 1 hour 55 minutes
          done
