name: Docker Compose Test on PR

on:
  pull_request:
    branches:
      - main
      - feature/*

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the pull request code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 3: Run Docker Compose
      - name: Run docker-compose up
        working-directory: src/backend  # Specify working directory here
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        run: docker-compose up -d

      # Step 4: Check if Ollama server is up
      - name: Check Ollama server status
        run: |
          end=$((SECONDS+120))  # Wait up to 2 minutes
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:11434 > /dev/null; then
              echo "Ollama server is up!"
              exit 0
            else
              echo "Waiting for Ollama server to be up..."
              sleep 5
            fi
          done
          echo "Error: Ollama server did not start within 2 minutes."
          exit 1

      # Step 5: Pull the Llama model
      - name: Pull Llama model
        run: |
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:11434/api/pull -d '{"name": "llama3.2:3b"}')
          http_code=${response: -3}
          body=${response%${http_code}}
          echo "Response Body: $body"
          echo "HTTP Status Code: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "Model llama3.2:3b pulled successfully."
          else
            echo "Failed to pull model. Exiting."
            exit 1
          fi

      # Step 6: Test model response
      - name: Test model response
        run: |
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:11434/api/generate -d '{
            "model": "llama3.2:3b",
            "prompt": "Is the sky blue? Give one word as an answer. Answer as either True or False.",
            "stream": false
          }')
          http_code=${response: -3}
          body=${response%${http_code}}
          echo "Response Body: $body"
          echo "HTTP Status Code: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "Model generated a response successfully."
          else
            echo "Failed to generate model response. Exiting."
            exit 1
          fi

      # Step 7: Test if the main server is up
      - name: Test server with curl
        run: |
          end=$((SECONDS+180))  # Wait up to 3 minutes
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:8000 > /dev/null; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server to be up..."
              sleep 5
            fi
          done
          echo "Error: Server did not start within 3 minutes."
          exit 1

      # Step 8: List entire directory structure for debugging
      - name: List directory contents (for debugging)
        run: |
          echo "Listing root directory:"
          ls -R $GITHUB_WORKSPACE
          echo "Listing backend directory:"
          ls -R src/backend
          echo "Listing test directory:"
          ls -R src/backend/test
          echo "Listing IntegrationTests directory:"
          ls -R src/backend/test/IntegrationTests

      # Step 9: Run Python Integration Tests
      - name: Run Python Integration Tests
        working-directory: src/backend
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        run: python -m unittest discover -s test/IntegrationTests -p "*.py"  # Discover all .py files

      # Step 10: Docker-compose logs for debugging
      - name: Fetch Docker Compose logs
        working-directory: src/backend
        run: docker-compose logs  # Fetch logs if something goes wrong

      # Step 11: Shut down Docker Compose (clean up)
      - name: Docker-compose down
        working-directory: src/backend  # Specify working directory here as well
        if: always()
        run: docker-compose down
