name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  run-integration-tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    - name: Start Docker containers
      run: docker-compose up -d

    # Step 1: Check if Ollama server is up
    - name: Check Ollama server status
      run: |
        end=$((SECONDS+120))  # Wait up to 2 minutes
        while [ $SECONDS -lt $end ]; do
          if curl -s http://localhost:11434 > /dev/null; then
            echo "Ollama server is up!"
            exit 0
          else
            echo "Waiting for Ollama server to be up..."
            sleep 5
          fi
        done
        echo "Error: Ollama server did not start within 2 minutes."
        exit 1

    # Step 2: Pull the Llama model
    - name: Pull Llama model
      run: |
        response=$(curl -s -w "%{http_code}" -X POST http://localhost:11434/api/pull -d '{"name": "llama3.2:3b"}')
        http_code=${response: -3}
        body=${response%${http_code}}
        echo "Response Body: $body"
        echo "HTTP Status Code: $http_code"

        if [ "$http_code" -eq 200 ]; then
          echo "Model llama3.2:3b pulled successfully."
        else
          echo "Failed to pull model. Exiting."
          exit 1
        fi

    # Step 3: Test the model API response
    - name: Test model response
      run: |
        response=$(curl -s -w "%{http_code}" -X POST http://localhost:11434/api/generate -d '{
          "model": "llama3.2:3b",
          "prompt": "Is the sky blue? Give one word as an answer. Answer as either True or False.",
          "stream": false
        }')
        http_code=${response: -3}
        body=${response%${http_code}}
        echo "Response Body: $body"
        echo "HTTP Status Code: $http_code"

        if [ "$http_code" -eq 200 ]; then
          echo "Model generated a response successfully."
        else
          echo "Failed to generate model response. Exiting."
          exit 1
        fi

    # Step 4: Test if the main server is up
    - name: Test main server with curl
      run: |
        end=$((SECONDS+120))  # Wait up to 2 minutes
        while [ $SECONDS -lt $end ]; do
          if curl -s http://localhost:8000 > /dev/null; then
            echo "Main server is up!"
            exit 0
          else
            echo "Waiting for the main server to be up..."
            sleep 5
          fi
        done
        echo "Error: Main server did not start within 2 minutes."
        exit 1
