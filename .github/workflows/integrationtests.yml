name: Docker Compose Test on PR

on:
  pull_request:
    branches:
      - main
      - feature/*
  push:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the pull request code
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Step 2: Set up SSH for GitHub
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Set PROJECT_ROOT
        run: echo "PROJECT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV

      # Step 3: Clone the private repository using SSH
      - name: Clone the env repo using SSH
        run: |
          git clone git@github.com:SaravanakumarR2018/primitivechatenv.git env_repo
          ls -la env_repo

      # Step 4: Copy the .env file
      - name: Copy .env file
        run: |
          cp env_repo/.env.local ${PROJECT_ROOT}/src/frontend/.env.local
          echo "âœ… .env.local copied to src/frontend"

      # Step 5: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 6: Load environment variables from .env file
      - name: Load .env and verify
        working-directory: src/backend
        run: |
          echo "Loading .env file..."
          if [ ! -f .env ]; then
            echo "Error: .env file not found in $(pwd)"
            exit 1
          fi
          # Export all variables from .env to GitHub Actions environment and print them
          while IFS= read -r line || [ -n "$line" ]; do
            [[ "$line" =~ ^#.*$ || -z "$line" ]] && continue  # Skip comments and empty lines
            key=$(echo "$line" | cut -d'=' -f1)
            value=$(echo "$line" | cut -d'=' -f2-)
            echo "$key=$value" >> $GITHUB_ENV
            echo "Exported: $key=$value"
          done < .env
          echo "All environment variables have been loaded and exported."

      # Step 7: Build Docker image
      - name: Build Docker image
        working-directory: src/backend  # Specify working directory here
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        run: |
          echo "Building Docker image chat_service_image"
          docker build -t chat_service_image:latest -f ${PROJECT_ROOT}/build/chat_service_docker/Dockerfile ${PROJECT_ROOT} || {
            echo "Docker build failed. Exiting..."
            exit 1
          }
          echo "Docker image chat_service_image built successfully."

      # Step 8: Run Docker Compose
      - name: Run docker-compose up
        working-directory: src/backend  # Specify working directory here
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        run: docker-compose up -d

      # Step 9: Check if Ollama server is up
      - name: Check Ollama server status
        run: |
          end=$((SECONDS+120))  # Wait up to 2 minutes
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:${{ env.OLLAMA_PORT }} > /dev/null; then
              echo "Ollama server is up!"
              exit 0
            else
              echo "Waiting for Ollama server to be up..."
              sleep 5
            fi
          done
          echo "Error: Ollama server did not start within 2 minutes."
          exit 1

      # Step 10: Test if the server is up
      - name: Test server with curl
        run: |
          end=$((SECONDS+480))
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:${{ env.CHAT_SERVICE_PORT }} > /dev/null; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server to be up..."
              sleep 5
            fi
          done
          echo "Error: Server did not start within 2 minutes."
          exit 1       

      # Step 11: Pull the Llama model
      - name: Pull Llama model
        run: |
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:${{ env.OLLAMA_PORT }}/api/pull -d '{"name": "llama3.2:3b"}')
          http_code=${response: -3}
          body=${response%${http_code}}
          echo "Response Body: $body"
          echo "HTTP Status Code: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "Model llama3.2:3b pulled successfully."
          else
            echo "Failed to pull model. Exiting."
            exit 1
          fi

      # Step 12: Test model response
      - name: Test model response
        run: |
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:${{ env.OLLAMA_PORT }}/api/generate -d '{
            "model": "llama3.2:3b",
            "prompt": "Is the sky blue? Give one word as an answer. Answer as either True or False.",
            "stream": false
          }')
          http_code=${response: -3}
          body=${response%${http_code}}
          echo "Response Body: $body"
          echo "HTTP Status Code: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "Model generated a response successfully."
          else
            echo "Failed to generate model response. Exiting."
            exit 1
          fi


      # Step 13: Run integration tests
      - name: Run Python Integration Tests
        working-directory: ${{ github.workspace }}
        run: |
          python -m unittest discover -s ./test/IntegrationTests -p "test_*.py"

      # Step 14: Shut down Docker Compose (clean up)
      - name: Docker-compose down
        working-directory: src/backend  # Specify working directory here as well
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        if: always()
        run: docker-compose down
