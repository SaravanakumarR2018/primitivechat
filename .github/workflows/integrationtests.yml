name: Docker Compose Test on PR

on:
  pull_request:
    branches:
      - main
      - feature/*

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the pull request code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 3: Load and verify .env variables
      - name: Load .env and verify
        working-directory: src/backend
        run: |
          echo "Loading .env file..."
          if [ ! -f .env ]; then
            echo "Error: .env file not found in $(pwd)"
            exit 1
          fi

          # Export all environment variables from .env
          set -o allexport
          source .env
          set +o allexport

          # Verify all variables
          echo "Environment Variables Loaded:"
          echo "DB_USER=${DB_USER}"
          echo "DB_PASSWORD=${DB_PASSWORD}"
          echo "DB_HOST=${DB_HOST}"
          echo "CHAT_SERVICE_PORT=${CHAT_SERVICE_PORT}"

          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}"
          echo "MYSQL_USER=${MYSQL_USER}"
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
          echo "MYSQL_PORT=${MYSQL_PORT}"

          echo "MINIO_HOST=${MINIO_HOST}"
          echo "MINIO_ROOT_USER=${MINIO_ROOT_USER}"
          echo "MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}"
          echo "MINIO_HOST_PORT=${MINIO_HOST_PORT}"
          echo "MINIO_SERVER_PORT=${MINIO_SERVER_PORT}"
          echo "MINIO_CONSOLE_PORT=${MINIO_CONSOLE_PORT}"

          echo "WEAVIATE_HOST=${WEAVIATE_HOST}"
          echo "WEAVIATE_HOST_PORT=${WEAVIATE_HOST_PORT}"
          echo "WEAVIATE_PORT=${WEAVIATE_PORT}"
          echo "WEAVIATE_GRPC_PORT=${WEAVIATE_GRPC_PORT}"

          echo "OLLAMA_PORT=${OLLAMA_PORT}"
          echo "OLLAMA_HOST=${OLLAMA_HOST}"          
      
      # Step 3: Run Docker Compose
      - name: Run docker-compose up
        working-directory: src/backend  # Specify working directory here
        env:
          PROJECT_ROOT: ${{ github.workspace }}
        run: docker-compose up -d

      # Step 4: Check if Ollama server is up
      - name: Check Ollama server status
        run: |
          end=$((SECONDS+120))  # Wait up to 2 minutes
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:${OLLAMA_PORT} > /dev/null; then
              echo "Ollama server is up!"
              exit 0
            else
              echo "Waiting for Ollama server to be up..."
              sleep 5
            fi
          done
          echo "Error: Ollama server did not start within 2 minutes."
          exit 1

      # Step 5: Test if the server is up
      - name: Test server with curl
        run: |
          end=$((SECONDS+120))
          while [ $SECONDS -lt $end ]; do
            if curl -s http://localhost:${CHAT_SERVICE_PORT} > /dev/null; then
              echo "Server is up!"
              exit 0
            else
              echo "Waiting for server to be up..."
              sleep 5
            fi
          done
          echo "Error: Server did not start within 2 minutes."
          exit 1       

      # Step 6: Pull the Llama model
      - name: Pull Llama model
        run: |
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:${OLLAMA_PORT}}/api/pull -d '{"name": "llama3.2:3b"}')
          http_code=${response: -3}
          body=${response%${http_code}}
          echo "Response Body: $body"
          echo "HTTP Status Code: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "Model llama3.2:3b pulled successfully."
          else
            echo "Failed to pull model. Exiting."
            exit 1
          fi

      # Step 7: Test model response
      - name: Test model response
        run: |
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:${OLLAMA_PORT}/api/generate -d '{
            "model": "llama3.2:3b",
            "prompt": "Is the sky blue? Give one word as an answer. Answer as either True or False.",
            "stream": false
          }')
          http_code=${response: -3}
          body=${response%${http_code}}
          echo "Response Body: $body"
          echo "HTTP Status Code: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "Model generated a response successfully."
          else
            echo "Failed to generate model response. Exiting."
            exit 1
          fi

      # Step 8: Run integration tests
      - name: Run Python Integration Tests
        working-directory: ${{ github.workspace }}
        run: |
          python -m unittest discover -s ./test/IntegrationTests

      # Step 9: Shut down Docker Compose (clean up)
      - name: Docker-compose down
        working-directory: src/backend  # Specify working directory here as well
        if: always()
        run: docker-compose down
